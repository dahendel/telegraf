package libvirt

import (
	"github.com/beevik/etree"
	"github.com/digitalocean/go-libvirt"
	"github.com/influxdata/telegraf"
	"github.com/stretchr/testify/mock"
)

type Mocklibvirt interface {
	getDomainInfo(dom libvirt.Domain, acc telegraf.Accumulator) *etree.Element
	getDomainDiskDevices(domainInfo *etree.Element, acc telegraf.Accumulator) []string
	getDomainInterfaces(domainInfo *etree.Element, acc telegraf.Accumulator) []string
	gatherDomainDiskData(dom libvirt.Domain, disks []string, acc telegraf.Accumulator)
	gatherDomainInterfaceData(dom libvirt.Domain, ifaces []string, acc telegraf.Accumulator)
	gatherDomainData(dom libvirt.Domain, acc telegraf.Accumulator)
	Gather(acc telegraf.Accumulator) error
}

// LibVirtMock is an autogenerated mock type for the LibVirtMock type
type LibVirtMock struct {
	mock.Mock
}

// gatherDomainData provides a mock function with given fields: dom, acc
func (_m *LibVirtMock) gatherDomainData(dom libvirt.Domain, acc telegraf.Accumulator) {
	_m.Called(dom, acc)
}

// gatherDomainDiskData provides a mock function with given fields: dom, disks, acc
func (_m *LibVirtMock) gatherDomainDiskData(dom libvirt.Domain, disks []string, acc telegraf.Accumulator) {
	_m.Called(dom, disks, acc)
}

// gatherDomainInterfaceData provides a mock function with given fields: dom, ifaces, acc
func (_m *LibVirtMock) gatherDomainInterfaceData(dom libvirt.Domain, ifaces []string, acc telegraf.Accumulator) {
	_m.Called(dom, ifaces, acc)
}

// getDomainDiskDevices provides a mock function with given fields: domainInfo, acc
func (_m *LibVirtMock) getDomainDiskDevices(domainInfo *etree.Element, acc telegraf.Accumulator) []string {
	ret := _m.Called(domainInfo, acc)

	var r0 []string
	if rf, ok := ret.Get(0).(func(*etree.Element, telegraf.Accumulator) []string); ok {
		r0 = rf(domainInfo, acc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// getDomainInfo provides a mock function with given fields: dom, acc
func (_m *LibVirtMock) getDomainInfo(dom libvirt.Domain, acc telegraf.Accumulator) *etree.Element {
	ret := _m.Called(dom, acc)

	var r0 *etree.Element
	if rf, ok := ret.Get(0).(func(libvirt.Domain, telegraf.Accumulator) *etree.Element); ok {
		r0 = rf(dom, acc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*etree.Element)
		}
	}

	return r0
}

// getDomainInterfaces provides a mock function with given fields: domainInfo, acc
func (_m *LibVirtMock) getDomainInterfaces(domainInfo *etree.Element, acc telegraf.Accumulator) []string {
	ret := _m.Called(domainInfo, acc)

	var r0 []string
	if rf, ok := ret.Get(0).(func(*etree.Element, telegraf.Accumulator) []string); ok {
		r0 = rf(domainInfo, acc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Gather provides a mock function with given fields: acc
func (_m *LibVirtMock) Gather(acc telegraf.Accumulator) error {
	ret := _m.Called(acc)

	var r0 error
	if rf, ok := ret.Get(0).(func(telegraf.Accumulator) error); ok {
		r0 = rf(acc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
